from __future__ import print_function
from __future__ import absolute_import
from __future__ import division

import numpy as np

# NN architechture
VF_NET = "VFNet"
RESNET = "ResNet"

# Prediction stae
PREDICT = "predict"

# Bilinear loss
ALPHA = 0.
CONF_MAT=np.array(
#    [[0.63231192, 0.30853377, 0.04294344, 0.01109281, 0.00144975, 0.00366831],
#     [0.05506895, 0.70534465, 0.19972489, 0.02841036, 0.00410313, 0.00734801],
#     [0.01005448, 0.23972295, 0.59707759, 0.11422574, 0.01800985, 0.0209094 ],
#     [0.00550186, 0.10522105, 0.34555606, 0.35203748, 0.09558872, 0.09609482],
#     [0.00306038, 0.06638446, 0.14972971, 0.3213683 , 0.20673283, 0.25272431],
#     [0.00209378, 0.04615158, 0.06184017, 0.1481274 , 0.12353288, 0.6182542 ]]

# VFNet 50mev
#    [[0.65538063, 0.29299783, 0.02893968, 0.0151066 , 0.00171267, 0.00586259],
#     [0.05635235, 0.75191917, 0.13698083, 0.03931792, 0.00459659, 0.01083315],
#     [0.0107037 , 0.27483446, 0.5190601 , 0.14408765, 0.02094202, 0.03037206],
#     [0.00512452, 0.09545647, 0.24814766, 0.40966805, 0.10898587, 0.13261742],
#     [0.0028    , 0.05342857, 0.076     , 0.29994286, 0.23897143, 0.32885714],
#     [0.00174134, 0.03364618, 0.02789092, 0.09837082, 0.10450977, 0.73384098]]

# VFNet 75mev
#    [[7.15774711e-01, 2.47658293e-01, 2.02399709e-02, 1.19466039e-02, 6.40614990e-04, 3.73980643e-03],
#     [6.75437453e-02, 7.79898990e-01, 1.09806767e-01, 3.40949671e-02, 2.36369099e-03, 6.29183931e-03],
#     [1.11867581e-02, 3.30178094e-01, 4.94318038e-01, 1.34283280e-01, 1.07649347e-02, 1.92688956e-02],
#     [3.62293597e-03, 1.22657284e-01, 2.68149516e-01, 4.52152860e-01, 6.12067164e-02, 9.22106877e-02],
#     [1.59790355e-03, 6.37563517e-02, 8.82362341e-02, 4.34214311e-01, 1.74139529e-01, 2.38055671e-01],
#     [1.04477612e-03, 3.39925373e-02, 2.48507463e-02, 1.80597015e-01, 1.19589552e-01, 6.39925373e-01]]

# VFNet 100mev
    [[7.05751598e-01, 2.53520715e-01, 2.71420424e-02, 9.90041093e-03, 6.87325427e-04, 2.99790878e-03],
     [5.89077521e-02, 7.58774524e-01, 1.45218444e-01, 2.89784569e-02, 2.49871471e-03, 5.62210810e-03],
     [8.87055815e-03, 2.89733621e-01, 5.57198900e-01, 1.16657034e-01, 1.06481725e-02, 1.68917144e-02],
     [2.50876222e-03, 9.45213060e-02, 3.37317838e-01, 4.23648773e-01, 5.78859989e-02, 8.41173215e-02],
     [1.02931781e-03, 4.35862852e-02, 1.20856108e-01, 4.49102009e-01, 1.68772627e-01, 2.16653652e-01],
     [9.39345142e-04, 2.06655931e-02, 3.37269637e-02, 2.01556629e-01, 1.26811594e-01, 6.16299875e-01]]
     
# ResNet 50 mev
#    [[0.7089108 , 0.24542599, 0.02719146, 0.01027916, 0.00270157, 0.00549101],
#     [0.05109   , 0.77836112, 0.1335101 , 0.02291113, 0.0063495 , 0.00777814],
#     [0.00864765, 0.21514605, 0.62402724, 0.10562546, 0.02677587, 0.01977773],
#     [0.00404825, 0.07327664, 0.27784398, 0.40267054, 0.15675552, 0.08540507],
#     [0.00217186, 0.0380076 , 0.08215929, 0.25870888, 0.3765896 , 0.24236276],
#     [0.00115126, 0.02222813, 0.02615421, 0.07196836, 0.17378085, 0.7047172 ]]

#    [0.59569718, 0.33732494, 0.04566673, 0.01359854, 0.00324741, 0.00446519],
#    [0.0591597,  0.6521325,  0.2322468,  0.03931633, 0.00698487, 0.01015981],
#    [0.01198968, 0.25868872, 0.57391106, 0.10760358, 0.0199575,  0.02784945],
#    [0.00598415, 0.09833414, 0.38573508, 0.29322335, 0.08054343, 0.13617985],
#    [0.00258993, 0.05841727, 0.1628777,  0.32719424, 0.15338129, 0.29553957],
#    [0.00179695, 0.04073076, 0.0557053,  0.15483678, 0.10212639, 0.64480383]]
)

# Get rid of the diagonal part of the pen_mat
CONF_MAT -= np.eye(CONF_MAT.shape[0]) * np.diag(CONF_MAT)
CONF_MAT /= CONF_MAT.sum(axis=1) #1 column "normalize" (better results!)
#CONF_MAT /= CONF_MAT.sum(axis=1)[:,np.newaxis] #2 row normalize

# Need a tf.constant version of the pen_mat
#pen_mat = tf.constant(CONF_MAT)
